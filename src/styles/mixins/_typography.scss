@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
    $src: null;

    $extmods: (
        eot: '?',
        svg: '#' + str-replace($name, ' ', '_')
    );

    $formats: (
        otf: 'opentype',
        ttf: 'truetype'
    );

    @each $ext in $exts {
        $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
        $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
        $src: append($src, url(quote($path + '-' + $weight + '-' + $style +  '.' + $extmod)) format(quote($format)), comma);
    }

    @font-face {
        font-family: quote($name);
        font-style: $style;
        font-weight: $weight;
        src: $src;
    }
}

@mixin fontSizeHelper($sizes) {
    @each $size in $sizes {
        .font-size-#{$size} {
            font-size: #{$size}px !important;
        }
    }
}

@mixin fontSizeHelperRwd($sizes) {
    @each $size in $sizes {
        @media #{$xs-only} {
            .font-size-xs-#{$size} {
                font-size: #{$size}px !important;
            }
        }
        @media #{$sm-only} {
            .font-size-sm-#{$size} {
                font-size: #{$size}px !important;
            }
        }
        @media #{$md-only} {
            .font-size-md-#{$size} {
                font-size: #{$size}px !important;
            }
        }
        @media #{$lg-only} {
            .font-size-lg-#{$size} {
                font-size: #{$size}px !important;
            }
        }
    }
}



